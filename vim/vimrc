" Vim Plug settings and configurations
call plug#begin('~/.vim/plugged')
"JSX, react native
Plug 'maxmellon/vim-jsx-pretty'
Plug 'mattn/emmet-vim'

" Auto detect indentation
Plug 'tpope/vim-sleuth'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }

"Syntastic
Plug 'scrooloose/syntastic'

" Autocomplete supertab
Plug 'ervandew/supertab'

" For colorscheme
Plug 'morhetz/gruvbox'
call plug#end()

"execute pathogen#infect()
"call pathogen#incubate()
"call pathogen#helptags()

set encoding=utf8 "utf8 as standard
set fileencodings=utf-8
set termencoding=utf-8
set encoding=utf-8

autocmd vimenter * colorscheme
"hybrid number mode
"set relativenumber
set number
autocmd InsertEnter * :set nu nornu
autocmd InsertLeave * :set rnu nu

" Tabs
set smarttab
set tabstop=4 "width of tab character
set softtabstop=4 "finetunes amount of white spaces to be inserted/deleted
set shiftwidth=4 "amount of white space to be inserted/deleted on normal mode
set expandtab "space instead of tab

set ai "auto indent
set si "smart indent
set wrap "wrap lines

set showmatch "show matching brackets
set hlsearch "highlight matches
"set cursorline "highlight current line
set colorcolumn=110
"set ignorecase "ignore case on search
set incsearch

syntax enable "syntax highlighting

"set background=light
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
"let g:solarized_visibility="high"
colorscheme solarized

" FILE CONFIGURATION
filetype on
filetype plugin on
"autoload CloseTag for xml/html files
"autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
"autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako source ~/.vim/bundle/closetag/plugin/closetag.vim

" FileType based settings
"autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
"autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
"autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType less setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType php setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType xml setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType sh setlocal ts=2 sts=2 sw=2 expandtab
"autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

"VIM PACKAGE CONFS: START
"
" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*


let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-x>E :SyntasticCheck<CR>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"VIM PACKAGE CONFS: END

"Programming language based configuration: START
" golang: Configuration
"
" nodejs: Configuration
set runtimepath^=~/.vim/bundle/node
"autocmd User Node if &filetype == "javascript" | setlocal expandtab | endif

" CSS
"let csslint_options_file = '~/.vim/bundle/lint.vim/js/csslint/options.js'

"JSX:Configurations
let g:vim_jsx_pretty_highlight_close_tag = 0
let g:jsx_ext_required = 0
let g:vim_jsx_pretty_template_tags = ['html', 'jsx']
autocmd FileType js setlocal ts=2 sts=2 sw=2 expandtab
let g:vim_jsx_pretty_colorful_config = 1 " default 0


"let g:closetag_xhtml_filetypes = 'xhtml,javascript.jsx,jsx'
"autocmd BufNewFile,BufRead *.js set filetype=javascript.jsx
"autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
"let g:closetag_shortcut = '>'



" ts:Configuration
let g:typescript_indent_disable = 1
let g:typescript_compiler_binary = 'tsc'
let g:typescript_compiler_options = ''
autocmd FileType typescript :set makeprg=tsc

" js: Configuration
"let jshint_options_file = '~/.vim/bundle/lint.vim/js/jshint/options.js'
set runtimepath+=~/.vim/bundle/jshint2.vim/

let g:javascript_plugin_jsdoc = 1   "Syntax highlighting for JSDocs
let g:javascript_plugin_ngdoc = 1   "Syntax highlighting for NGDocs
let g:javascript_plugin_flow = 1    "Syntax highlighting for flow

set conceallevel=1
let g:javascript_conceal_function             = "Æ’"
let g:javascript_conceal_null                 = "Ã¸"
let g:javascript_conceal_this                 = "@"
let g:javascript_conceal_return               = "â‡š"
let g:javascript_conceal_undefined            = "Â¿"
let g:javascript_conceal_NaN                  = "â„•"
let g:javascript_conceal_prototype            = "Â¶"
let g:javascript_conceal_static               = "â€¢"
let g:javascript_conceal_super                = "Î©"
let g:javascript_conceal_arrow_function       = "â‡’"
"let g:javascript_conceal_noarg_arrow_function = "ðŸž…"
"let g:javascript_conceal_underscore_arrow_function = "ðŸž…"


" yaml: Configuration
au BufNewFile,BufRead *.yaml,*.yml so ~/.vim/yaml.vim
" yaml: Configuration end

" python: Configuration start
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_python_checkers = ['python']

au BufRead,BufNewFile *.py set expandtab
" autocmd FileType py setlocal ts=4 sts=4 sw=4 expandtab
" let g:syntastic_python_pylint_args = '-E'
"" to show it accepts a string of args, also:
" let g:syntastic_python_pylint_args = '--rcfile=/path/to/rc -E'
" python: Configuration end


" Programming language based configuration: END


" Keyboard based configuration
let mapleader = "\<space>"

" Spell check
nmap <silent> <leader>s :set spell!<CR>

" Show invisible characters
set listchars=tab:â–¸\ ,eol:Â¬
set list
nmap <leader>l :set list! nonu! nornu!<CR>

set hidden "manage hidden buffers

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline

" EasyMotion keybinding and shading
hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" airline
let g:airline_powerline_fonts=1
let g:airline_theme="murmur"
let g:bufferline_echo = 0
let g:airline#extensions#tabline#enabled = 1



"let g:syntastic_php_checkers=[]
" KeyMaps
nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>


" STOP using arrow keys!
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"inoremap <up> <nop>
"inoremap <down> <nop>
"inoremap <left> <nop>
"inoremap <right> <nop>

" Buffers - next/previous: F12, Shift-F12.
nnoremap <silent> <F12> :bn<CR>
nnoremap <silent> <F11> :bp<CR>
nnoremap <Leader>b :ls<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Functions
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Save read-only files
cnoremap sudow w !sudo tee % >/dev/null

let g:ctrlp_custom_ignore = 'node_modules'

" Powerline for vim
set rtp+=/home/mithun/.local/lib/python3.8/site-packages/powerline/bindings/vim/
" Always show statusline
set laststatus=2
" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256
